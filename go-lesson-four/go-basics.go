package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"strconv"
	"strings"
)

func main() {
	fmt.Println("Lesson_04")
	//demonstrateMaxMinForTypes()
	//demonstrateCheckedUncheckedErrors()
	runLessons()
	runReadFromConsole()
}

const (
	TEXT_FILE_NAME = "documents/price-list.txt"
	JSON_FILE_NAME = "documents/documents.json"
)

type Author struct {
}

func runLessons() {
	runLesson(runMath)
	runLesson(runRandom)
	runLesson(runSlicesSort)
	runLesson(runDefer)
	runLesson(runErrors)
	runLesson(runReadWriteToFile)
	runLesson(runReadFromConsole)
}

// MAth
func demonstrateMaxMinForTypes() {
	var maxInt8Value int8 = math.MaxInt8
	var maxInt16Value int16 = math.MaxInt16
	var maxInt32Value int32 = math.MaxInt32
	var maxInt64Value int64 = math.MaxInt64
	fmt.Println("Max values for int ->  ", maxInt8Value, maxInt16Value, maxInt32Value, maxInt64Value)

	var Int8Value int8
	var Int16Value int16
	var Int32Value int32
	var Int64Value int64
	fmt.Println("Values for int by default ->  ", Int8Value, Int16Value, Int32Value, Int64Value)

	var minInt8Value int8 = math.MinInt8
	var minInt16Value int16 = math.MinInt16
	var minInt32Value int32 = math.MinInt32
	var minInt64Value int64 = math.MinInt64
	fmt.Println("Min values for int ->  ", minInt8Value, minInt16Value, minInt32Value, minInt64Value)

	var minsInt8Value int8 = math.MinInt8
	var minsInt16Value int32 = math.MinInt16   // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∫ int32 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
	var minsInt32Value float32 = math.MinInt32 // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∫ float32 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
	var minsInt64Value int = math.MinInt64
	var minsIntValue float64 = math.MinInt
	fmt.Println(minsInt8Value, minsInt16Value, minsInt32Value, minsInt64Value, minsIntValue)

	//var maxInt16InInt8 int8 = math.MaxInt16 // maxInt16 = 32767, maxInt8 = 127 –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, —Ç.–∫. –º–µ–Ω—å—à–µ  (–Ω–µ –ª–µ–∑–µ)
	//var minInt16InInt8 int8 = math.MinInt16 // minInt16 = -32768, minInt8 = -128 –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, —Ç.–∫. –º–µ–Ω—å—à–µ (–Ω–µ –ª–µ–∑–µ)
	var maxUint8 uint8 = math.MaxUint8
	var maxUint16 uint16 = math.MaxUint16
	var maxUint32 uint32 = math.MaxUint32
	var maxUint64 uint64 = math.MaxUint64
	var maxUint uint = math.MaxUint
	fmt.Println(maxUint8, maxUint16, maxUint32, maxUint64, maxUint)

	// maxUintInDefaultIn:= math.MaxUint
	// maxUint64InDefaultIn:= math.MaxUint64

	var maxFloat32 float32 = math.MaxFloat32
	var maxFloat64 float64 = math.MaxFloat64

	// var minFloat32 float32 math. MinFloat32
	// var minFloat64 float64 math.MinFloat64

	fmt.Println(maxFloat32, maxFloat64)
}

func demonstrateMaxMinBetweenValues() {
}

func demonstrateRounding() {
}

// Errors
func demonstrateCheckedUncheckedErrors() {

	int8Value1, err := strconv.ParseInt("127", 10, 8)
	fmt.Printf("int8Value1 = %d, err = %v \n", int8Value1, err)

	int8Value2, err := strconv.ParseInt("127", 10, 8)
	fmt.Printf("int8Value2 = %d, err = %v \n", int8Value2, err)

	fmt.Printf("err as...\n* v: [%v]\n +v: [%+v]\n s: [%s]\n * +s: [%s]\n", err, err, err, err)

	intArray := [2]int{100, 500}
	outOfRangeIndex := len(intArray)
	fmt.Println(intArray[outOfRangeIndex])

	var strErr string = err.Error()
	// var strError string = err
	fmt.Println("err.Error:", strErr)
}

func getPrice(itemInfo string) (float64, error) {
	fmt.Printf("–û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–û–ö–ò [%s]\n", itemInfo)

	if itemInfo == "" {
		return 0, &EmptyItemInfoError{}
	}

	priceIndex := strings.Index(itemInfo, "price:")
	if priceIndex == -1 {
		return 0, &NoPriceInItemInfoError{itemInfo}
	}

	var priceString string = itemInfo[priceIndex+6:]
	priceFloat64, err := strconv.ParseFloat(priceString, 64)
	if err == nil {
		return priceFloat64, nil
	}
	return 0, fmt.Errorf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ [%s]", itemInfo)
}

//
//func pretendReadingItemInfoFromKeyboard() [] string {
//}
//

func inputNewItemInfo(itemsInfo *[]string) {
}

// Read & Write To File
func writeTextToFile(fileName, str string) {
	/*
			Permissions : –¥–ª—è —Ñ–∞–π–ª–∞

		–≤–æ—Ç –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∂–µ os.WriteFile(fileName, bytesToWrite, 0644)
			 –†–ï–ñ–ò–ú –§–ê–ô–õ–ê
			0 - –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
			1 - –ø–∞–ø–∫–∞
			2 —Å—Å—ã–ª–∫–∞
			3 —Å–æ–∫–µ—Ç
			4 —Ñ–∞–π–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
			5 –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
			6 –∏ 7 –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º

			–ü–†–ê–í–ê –î–û–°–¢–£–ü–ê –ö –§–ê–ô–õ–£
			I —Ü–∏—Ñ—Ä–∞ –≤–ª–∞–¥–µ–ª–µ—Ü, –ø—Ä–∞–≤–∞ –¥–ª—è –º–µ–Ω—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞  0  - –Ω–µ—Ç –ø—Ä–∞–≤ üëá
			–Ü–Ü —Ü–∏—Ñ—Ä–∞ –≥—Ä—É–ø–ø–∞
			–Ü–Ü–Ü —Ü–∏—Ñ—Ä–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ

			0 - –ù–µ—Ç –ø—Ä–∞–≤
			1- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
			2- –ó–∞–ø–∏—Å—å
			3 –ó–∞–ø–∏—Å—å + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
			4 –ß—Ç–µ–Ω–∏–µ
			5 –ß—Ç–µ–Ω–∏–µ + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
			6- –ß—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å
			7- –ß—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	*/
	bytesToWrite := []byte(str)
	if err := os.WriteFile(fileName, bytesToWrite, 0644); err != nil {
		panic(err)
	}
}

func runReadWriteToFile() {
	pricelist := "Mango: 5.70\nBanana: 2.35\nOrange: 2.20\nApple \"Golden\":1.95"
	writeTextToFile(TEXT_FILE_NAME, pricelist)
	defer os.Remove(TEXT_FILE_NAME)
	textFromFile := readTextFromFile(TEXT_FILE_NAME)
	fmt.Println(textFromFile)
	documents := []Document{}

	writeDocumentsToJsonFile(JSON_FILE_NAME, &documents)
	defer os.Remove(JSON_FILE_NAME)

	documentsFromFile := readDocumentsFromJsonFile(JSON_FILE_NAME)
	printDocuments("–ü—Ä–æ—á–∏—Ç–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã:", documentsFromFile)
}

// Read From Console
func runReadFromConsole() {

	// import fmt
	fmt.Println("Scan-1. –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ...")

	var answer string
	fmt.Scan(&answer)
	fmt.Printf("–û—Ç–≤–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ: [%s]\n\n", answer)

	pause()
	pause()

	fmt.Println("Scan-2. –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è...")
	var skippedVariable string
	fmt.Scan(skippedVariable)
	fmt.Printf("–Ø –∂–µ –≥–æ–≤–æ—Ä—é, –Ω–µ —É–¥–∞—Å—Ç—Å—è: [%s]\n\n", skippedVariable)

	pause()

	fmt.Println("Scan-3. –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
	color, intValue, floatValue, boolValue := "", 0, 0.0, false
	count, err := fmt.Scan(&color, &intValue, &floatValue, &boolValue)
	fmt.Printf("–°—á–∏—Ç–∞–Ω–æ % —Å—Ç—Ä–æ–∫. –û—à–∏–±–∫–∞ %v\n", count, err)
	fmt.Printf("–¶–≤–µ—Ç: %5, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: %d, –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ: %f, –±—É–ª–µ–≤–æ: %v\n\n", color, intValue, floatValue, boolValue)

	pause()

	fmt.Println("Scanln-4. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—ã–π —Ñ—Ä—É–∫—Ç, —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ —Ä—É–∫–∞—Ö...")
	fruit, fingers := "", 0
	count, err = fmt.Scan(&fruit, &fingers)
	fmt.Printf("–°—á–∏—Ç–∞–Ω–æ %d —Å—Ç—Ä–æ–∫. –û—à–∏–±–∫–∞ = %v\n", count, err)
	fmt.Printf("–õ—é–±–∏–º—ã–π —Ñ—Ä—É–∫—Ç: %5, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ —Ä—É–∫–∞—Ö: %d\n\n", fruit, fingers)

	pause()

	fmt.Println("Scanln-5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥–∏...")
	var favoriteBook1, favoriteBook2, favoriteBook3 string
	fmt.Scanln(&favoriteBook1, &favoriteBook2, &favoriteBook3)
	fmt.Printf("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: \n1) [%s]\n2) [%s]\n3) [%s]\n\n", favoriteBook1, favoriteBook2, favoriteBook3)

	fmt.Println("Scan 6. –ï—â—ë —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥–∏...")
	fmt.Scan(&favoriteBook1, &favoriteBook2, &favoriteBook3)
	fmt.Printf("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: \n1) [%s]\n2) [%s]\n3) [%s]\n\n", favoriteBook1, favoriteBook2, favoriteBook3)

	pause()

	// import bufio
	fmt.Println("bufio-7. –ï—â—ë —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥–∏...")
	reader := bufio.NewReader(os.Stdin)
	favoriteBook1, _ = reader.ReadString('\n')
	favoriteBook2, _ = reader.ReadString('\n')
	favoriteBook3, _ = reader.ReadString('\n')
	fmt.Printf("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: \n1) [%s]\n2) [%s]\n3) [%s]\n\n", favoriteBook1, strings.ToUpper(favoriteBook2),
		strings.TrimSpace(favoriteBook3))

	fmt.Println("bufio-8. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤, –≤ –∫–æ–Ω—Ü–µ –Ω–∞–±—Ä–∞–≤ \"–∫–æ–Ω–µ—Ü\"...")
	scanner := bufio.NewScanner(os.Stdin)
	blogers := []string{}
	for {
		scanner.Scan()
		scannedText := scanner.Text()
		if scannedText == "–∫–æ–Ω–µ—Ü" {
			break
		}
		blogers = append(blogers, scannedText)
	}
	fmt.Println("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –±–ª–æ–≥–µ—Ä—ã:")

	for index, bloger := range blogers {
		fmt.Println(index, bloger)
	}
	pause()

}

func pause() {

}
