package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"math"
	"os"
	"strconv"
	"strings"
)

func main() {
	fmt.Println("Lesson_04_ : https://www.youtube.com/watch?v=Gk6BXGF7mko&list=PLcLNZ0ymDkp7XKi7Yg-4maj4kXBV-mZpF&index=4")
	runLessons()
}

const (
	TEXT_FILE_NAME = "go-lesson-four/documents/price-list.txt" // –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ (–Ω–∞—á–∞–ª—å–Ω–æ–π, —Ç.–µ. –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è))
	JSON_FILE_NAME = "go-lesson-four/documents/documents.json"
)

type Author struct {
}

func runLessons() {
	runLesson(runMath)
	//runLesson(runRandom)
	//runLesson(runSlicesSort)
	//runLesson(runDefer)
	//runLesson(runErrors)
	runLesson(runReadWriteToFile)
	//runLesson(runReadFromConsole)
}

func runLesson(m func()) {
	m() // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ m
}

// Math
func demonstrateMaxMinForTypes() {
	var maxInt8Value int8 = math.MaxInt8
	var maxInt16Value int16 = math.MaxInt16
	var maxInt32Value int32 = math.MaxInt32
	var maxInt64Value int64 = math.MaxInt64
	fmt.Println("Max values for int ->  ", maxInt8Value, maxInt16Value, maxInt32Value, maxInt64Value)

	var Int8Value int8
	var Int16Value int16
	var Int32Value int32
	var Int64Value int64
	fmt.Println("Values for int by default ->  ", Int8Value, Int16Value, Int32Value, Int64Value)

	var minInt8Value int8 = math.MinInt8
	var minInt16Value int16 = math.MinInt16
	var minInt32Value int32 = math.MinInt32
	var minInt64Value int64 = math.MinInt64
	fmt.Println("Min values for int ->  ", minInt8Value, minInt16Value, minInt32Value, minInt64Value)

	var minsInt8Value int8 = math.MinInt8
	var minsInt16Value int32 = math.MinInt16   // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∫ int32 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
	var minsInt32Value float32 = math.MinInt32 // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∫ float32 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
	var minsInt64Value int = math.MinInt64
	var minsIntValue float64 = math.MinInt
	fmt.Println(minsInt8Value, minsInt16Value, minsInt32Value, minsInt64Value, minsIntValue)

	//var maxInt16InInt8 int8 = math.MaxInt16 // maxInt16 = 32767, maxInt8 = 127 –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, —Ç.–∫. –º–µ–Ω—å—à–µ  (–Ω–µ –ª–µ–∑–µ)
	//var minInt16InInt8 int8 = math.MinInt16 // minInt16 = -32768, minInt8 = -128 –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, —Ç.–∫. –º–µ–Ω—å—à–µ (–Ω–µ –ª–µ–∑–µ)
	var maxUint8 uint8 = math.MaxUint8
	var maxUint16 uint16 = math.MaxUint16
	var maxUint32 uint32 = math.MaxUint32
	var maxUint64 uint64 = math.MaxUint64
	var maxUint uint = math.MaxUint
	fmt.Println(maxUint8, maxUint16, maxUint32, maxUint64, maxUint)

	// maxUintInDefaultIn:= math.MaxUint
	// maxUint64InDefaultIn:= math.MaxUint64

	var maxFloat32 float32 = math.MaxFloat32
	var maxFloat64 float64 = math.MaxFloat64

	// var minFloat32 float32 math. MinFloat32
	// var minFloat64 float64 math.MinFloat64

	fmt.Println(maxFloat32, maxFloat64)
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏
func demonstrateMaxMinBetweenValues() {
	var maxFloat float64 = math.Max(1.1, 1.2)
	fmt.Println("max =", maxFloat)

	var minFloat float64 = math.Min(1.1, 1.2)
	fmt.Println("min =", minFloat)

	minValue := math.Min(1, 2)
	fmt.Println("min =", minValue)

	var intValue1, intValue2 int = 1, 2
	// _ = math.Max(intValue1, intValue2) –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é Max –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ç–∏–ø–æ–º int Golang –≤—Å–µ—Ä–∞–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ float64
	_ = math.Max(float64(intValue1), float64(intValue2))

	var float32Value1, float32Value2 float32 = 1.1, 2.2
	// _ = math.Min(float32Value1, float32Value2) –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é Max –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ç–∏–ø–æ–º float32 a Golang –≤—Å–µ—Ä–∞–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ float64
	_ = math.Min(float64(float32Value1), float64(float32Value2))
}

func demonstrateRounding() {
	// Ceil –≤—Å–µ–≥–¥–∞ ‚Üë
	var ceil1, ceil2, ceil3 float64 = math.Ceil(2.49), math.Ceil(2.5), math.Ceil(2.51)
	fmt.Println("ceill", ceil1, ", ceil2", ceil2, ", ceil3 =", ceil3)

	var ceil4, ceil5, ceil6 float64 = math.Ceil(-2.49), math.Ceil(-2.5), math.Ceil(-2.51)
	fmt.Println("ceil =", ceil4, ", ceil5", ceil5, ", ceil6", ceil6)

	// Floor - –≤—Å–µ–≥–¥–∞ ‚Üì
	var floor1, floor2, floor3 float64 = math.Floor(2.49), math.Floor(2.5), math.Floor(2.51)
	fmt.Println("floor1", floor1, ", floor2", floor2, ", floor3 =", floor3)

	var floor4, floor5, floor6 float64 = math.Floor(-2.49), math.Floor(-2.5), math.Floor(-2.51)
	fmt.Println("floor4", floor4, ", floor5", floor5, ", floor6 =", floor6)

	// Round 1 –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –≥–¥–µ >= *.5 –æ–∫—Ä—É–≥–ª—è–µ—Ç –¥–∞–ª—å—à–µ –æ—Ç –Ω—É–ª—è
	var round1, round2, round3 float64 = math.Round(2.49), math.Round(2.5), math.Round(2.51)
	fmt.Println("round1=", round1, ", round2", round2, ", round3", round3)

	var round4, round5, round6 float64 = math.Round(-2.49), math.Round(-2.5), math.Round(-2.51)
	fmt.Println("round4 =", round4, ", round5", round5, ", round6", round6)

	// RoundToEven –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ, –≥–¥–µ *.5 –æ–∫—Ä—É–≥–ª—è–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ —á—ë—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞
	var roundToEven1, roundToEven2 float64 = math.RoundToEven(2.49), math.RoundToEven(2.51)
	fmt.Println("roundToEven1 =", roundToEven1, ", round To Even2 =", roundToEven2)

	var roundToEven3, roundToEven4 float64 = math.RoundToEven(-2.49), math.RoundToEven(-2.51)
	fmt.Println("roundToEven3", roundToEven3, ", round To Even4", roundToEven4)

	var roundToEven5, roundToEven6 float64 = math.RoundToEven(2.5), math.RoundToEven(3.5)
	fmt.Println("roundToEven5", roundToEven5, ", round To Even6", roundToEven6)

	var roundToEven7, roundToEven8 float64 = math.RoundToEven(-2.5), math.RoundToEven(-3.5)
	fmt.Println("roundToEven7", roundToEven7, ", roundToEven8", roundToEven8)

	// –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ ‚Ññ –∑–Ω–∞–∫–æ–≤
	number := 1.45 // -> 1.5
	rounded1 := math.Round(number*10) / 10
	// 1.45 * 10 = 14.5
	// Round (14.5) = 15
	// 15/10 = 1.5
	fmt.Println("rounded1 =", rounded1)

	number = 1.45 // -> 1.4
	rounded2 := math.RoundToEven(number*10) / 10
	// 1.45 10 14.5
	// RoundToEven (14.5) 14
	// 14/10 1.4
	fmt.Println("rounded2 = ", rounded2)

	number = 2.0081 // -> 2.008
	rounded3 := math.Floor(number*1000) / 1000
	// 2.0081 * 1000 2008.1
	// Floor (2008.1) = 2008
	// 2008 / 1000 = 2.008
	fmt.Println(rounded3)

	number = 2.0081 // -> 2.009
	rounded4 := math.Ceil(number*1000) / 1000
	// 2.0081 * 1000 2008.1
	// Ceil(2008.1) = 2009
	// 2009/1000 = 2.009
	fmt.Println(rounded4)

}

func demonstratePow() { // —Ä–∞–±–æ—Ç–∞–µ—Ç —Å float64
	// Pow
	var powValue1 float64 = math.Pow(1.1, math.Pi) // 1.1 ¬≥
	fmt.Println("powValue1 =", powValue1)

	var int8Value1, int8Value2 int8 = 2, 3
	var powValue2 float64 = math.Pow(float64(int8Value1), float64(int8Value2))
	fmt.Println("powValue2 =", powValue2)

	var powValue3 float64 = math.Pow(-2, 3)
	fmt.Println("powValue3", powValue3)

	// Pow10
	var pow10Value1 float64 = math.Pow10(1)
	fmt.Println("pow10Value1", pow10Value1)

	var pow10Value2 float64 = math.Pow10(2)
	fmt.Println("pow10Value2", pow10Value2)

	// = math. Pow10(2.999)
	var float64Value float64 = 2.999
	var pow10Value3 float64 = math.Pow10(int(float64Value))
	fmt.Println("pow10Value3 =", pow10Value3)
}

func demonstrateMod() {
	// % –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
	fmt.Println("11/3", 11.0/3.0)
	fmt.Println("11% 3", 11%3)
	for i := 0; i < 3; i++ {
		fmt.Println("–ò–Ω–¥–µ–∫—Å =", 1)
		if i%2 == 0 {
			fmt.Printf("%d —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n", i)
		}
		if i%3 == 0 {
			fmt.Printf("%d –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 3\n", i)
		}
	}
}
func runMath() {
	// import "math"
	demonstrateMaxMinForTypes()
	demonstrateMaxMinBetweenValues()
	demonstrateRounding()
	demonstratePow()
	demonstrateMod()
}

// Errors
func demonstrateCheckedUncheckedErrors() {

	int8Value1, err := strconv.ParseInt("127", 10, 8)
	fmt.Printf("int8Value1 = %d, err = %v \n", int8Value1, err)

	int8Value2, err := strconv.ParseInt("127", 10, 8)
	fmt.Printf("int8Value2 = %d, err = %v \n", int8Value2, err)

	fmt.Printf("err as...\n* v: [%v]\n +v: [%+v]\n s: [%s]\n * +s: [%s]\n", err, err, err, err)

	intArray := [2]int{100, 500}
	outOfRangeIndex := len(intArray)
	fmt.Println(intArray[outOfRangeIndex])

	var strErr string = err.Error()
	// var strError string = err
	fmt.Println("err.Error:", strErr)
}

func getPrice(itemInfo string) (float64, error) {
	fmt.Printf("–û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–û–ö–ò [%s]\n", itemInfo)

	if itemInfo == "" {
		return 0, &EmptyItemInfoError{}
	}

	priceIndex := strings.Index(itemInfo, "price:")
	if priceIndex == -1 {
		return 0, &NoPriceInItemInfoError{itemInfo}
	}

	var priceString string = itemInfo[priceIndex+6:]
	priceFloat64, err := strconv.ParseFloat(priceString, 64)
	if err == nil {
		return priceFloat64, nil
	}
	return 0, fmt.Errorf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ [%s]", itemInfo)
}

//
//func pretendReadingItemInfoFromKeyboard() [] string {
//}
//

func inputNewItemInfo(itemsInfo *[]string) {
}

// Read & Write To File
func writeTextToFile(fileName, str string) {
	/*
				Permissions : –¥–ª—è —Ñ–∞–π–ª–∞

			–≤–æ—Ç –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∂–µ os.WriteFile(fileName, bytesToWrite, 0644)
				0 –†–ï–ñ–ò–ú –§–ê–ô–õ–ê
				0 - –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
				1 - –ø–∞–ø–∫–∞
				2 —Å—Å—ã–ª–∫–∞
				3 —Å–æ–∫–µ—Ç
				4 —Ñ–∞–π–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
				5 –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
				6 –∏ 7 –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º

				–ü–†–ê–í–ê –î–û–°–¢–£–ü–ê –ö –§–ê–ô–õ–£
		        0 - —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ (—Ä–µ–∂–∏–º —Ñ–∞–π–ª–∞ üëÜ) 0
				I —Ü–∏—Ñ—Ä–∞ –≤–ª–∞–¥–µ–ª–µ—Ü, –ø—Ä–∞–≤–∞ –¥–ª—è –º–µ–Ω—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞  0  - –Ω–µ—Ç –ø—Ä–∞–≤ üëá 6
				–Ü–Ü —Ü–∏—Ñ—Ä–∞ –≥—Ä—É–ø–ø–∞ 4
				–Ü–Ü–Ü —Ü–∏—Ñ—Ä–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 4

				0 - –ù–µ—Ç –ø—Ä–∞–≤
				1- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
				2- –ó–∞–ø–∏—Å—å
				3 –ó–∞–ø–∏—Å—å + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
				4 –ß—Ç–µ–Ω–∏–µ
				5 –ß—Ç–µ–Ω–∏–µ + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
				6- –ß—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å
				7- –ß—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	*/
	//bytesToWrite := []byte(str)     // –º–æ–∂–Ω–æ —Ç–∞–∫ –∏ —Ç–∞–∫ bytesToWrite –∏–ª–∏ []byte(str) –Ω–∏–∂–µ –≤—Å—Ç–∞–≤–∏—Ç—å
	if err := os.WriteFile(fileName, []byte(str), 0644); err != nil {
		panic(err)
	}
}

func runReadWriteToFile() {
	pricelist := "Mango: - 5.70\nBanana: - 2.35\nOrange: - 2.20\nApple \"Golden\": - 1.95"
	writeTextToFile(TEXT_FILE_NAME, pricelist)
	//defer os.Remove(TEXT_FILE_NAME)  // —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏
	textFromFile := readTextFromFile(TEXT_FILE_NAME)
	fmt.Println(textFromFile)

	documents := []Document{
		{
			Id:   75951,
			Type: "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
			Goods: []Good{
				{Id: 75, Name: "–ö–Ω–∏–≥–∞ –°–∞–≥–∞ (–¢–æ–Ω–∏–Ω–æ –ë–µ–Ω–∞–∫–≤–∏—Å—Ç–∞, 1997)"},
				{Id: 11, Name: "–î–æ—Å—Ç–∞–≤–∫–∞"},
			},
			Author: &Employee{Id: 24, Name: "–û–¥—Ä–∏ –•–æ—Ä–Ω", Position: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"},
		},
		{
			Id:   13500,
			Type: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥",
			Goods: []Good{
				{Id: 285, Name: "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ Samsung"},
				{Id: 289, Name: "–ö–∞–ø—Å—É–ª—ã –¥–ª—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã (500 —à—Ç)"},
			},
			Author: &Employee{Id: 7, Name: "–®–µ–ª–ª–∏ –î–∂–æ–Ω—Å–æ–Ω", Position: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∑–∞–∫—É–ø–∫–∞–º"},
		},
	}

	writeDocumentsToJsonFile(JSON_FILE_NAME, &documents)
	//defer os.Remove(JSON_FILE_NAME)  // —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏

	documentsFromFile := readDocumentsFromJsonFile(JSON_FILE_NAME)
	printDocuments("–ü—Ä–æ—á–∏—Ç–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã:", documentsFromFile)
}

func writeDocumentsToJsonFile(fileName string, documents *[]Document) {
	file, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.Encode(documents)

	printDocuments("–ó–∞–ø–∏—Å–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã:", documents)
}

func printDocuments(header string, documents *[]Document) {
	fmt.Println(strings.ToUpper(header))
	for _, doc := range *documents {
		doc.Print()
	}
}

func readDocumentsFromJsonFile(fileName string) *[]Document {
	bytesFromFile, err := os.ReadFile(fileName)
	if err != nil {
		panic(err)
	}

	strFromFile := string(bytesFromFile)
	reader := strings.NewReader(strFromFile)
	decoder := json.NewDecoder(reader)

	var documentsFromFile []Document
	err = decoder.Decode(&documentsFromFile)
	if err != nil {
		panic(err)
	}
	return &documentsFromFile
}

func readTextFromFile(fileName string) string {
	str, err := os.ReadFile(fileName)
	if err != nil {
		panic(err)
	}
	return string(str)
}

// Read From Console
func runReadFromConsole() {

	// import fmt
	fmt.Println("Scan-1. –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ...")

	var answer string
	fmt.Scan(&answer)
	fmt.Printf("–û—Ç–≤–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ: [%s]\n\n", answer)

	pause()

	fmt.Println("Scan-2. –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è...")
	var skippedVariable string
	fmt.Scan(skippedVariable)
	fmt.Printf("–Ø –∂–µ –≥–æ–≤–æ—Ä—é, –Ω–µ —É–¥–∞—Å—Ç—Å—è: [%s]\n\n", skippedVariable)

	pause()

	fmt.Println("Scan-3. –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
	color, intValue, floatValue, boolValue := "", 0, 0.0, false
	count, err := fmt.Scan(&color, &intValue, &floatValue, &boolValue)
	fmt.Printf("–°—á–∏—Ç–∞–Ω–æ % —Å—Ç—Ä–æ–∫. –û—à–∏–±–∫–∞ %v\n", count, err)
	fmt.Printf("–¶–≤–µ—Ç: %5, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: %d, –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ: %f, –±—É–ª–µ–≤–æ: %v\n\n", color, intValue, floatValue, boolValue)

	pause()

	fmt.Println("Scanln-4. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—ã–π —Ñ—Ä—É–∫—Ç, —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ —Ä—É–∫–∞—Ö...")
	fruit, fingers := "", 0
	count, err = fmt.Scan(&fruit, &fingers)
	fmt.Printf("–°—á–∏—Ç–∞–Ω–æ %d —Å—Ç—Ä–æ–∫. –û—à–∏–±–∫–∞ = %v\n", count, err)
	fmt.Printf("–õ—é–±–∏–º—ã–π —Ñ—Ä—É–∫—Ç: %5, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ —Ä—É–∫–∞—Ö: %d\n\n", fruit, fingers)

	pause()

	fmt.Println("Scanln-5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥–∏...")
	var favoriteBook1, favoriteBook2, favoriteBook3 string
	fmt.Scanln(&favoriteBook1, &favoriteBook2, &favoriteBook3)
	fmt.Printf("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: \n1) [%s]\n2) [%s]\n3) [%s]\n\n", favoriteBook1, favoriteBook2, favoriteBook3)

	fmt.Println("Scan 6. –ï—â—ë —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥–∏...")
	fmt.Scan(&favoriteBook1, &favoriteBook2, &favoriteBook3)
	fmt.Printf("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: \n1) [%s]\n2) [%s]\n3) [%s]\n\n", favoriteBook1, favoriteBook2, favoriteBook3)

	pause()

	// import bufio
	fmt.Println("bufio-7. –ï—â—ë —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ø-3 –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥–∏...")
	reader := bufio.NewReader(os.Stdin)
	favoriteBook1, _ = reader.ReadString('\n')
	favoriteBook2, _ = reader.ReadString('\n')
	favoriteBook3, _ = reader.ReadString('\n')
	fmt.Printf("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: \n1) [%s]\n2) [%s]\n3) [%s]\n\n", favoriteBook1, strings.ToUpper(favoriteBook2),
		strings.TrimSpace(favoriteBook3))

	fmt.Println("bufio-8. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤, –≤ –∫–æ–Ω—Ü–µ –Ω–∞–±—Ä–∞–≤ \"–∫–æ–Ω–µ—Ü\"...")
	scanner := bufio.NewScanner(os.Stdin)
	blogers := []string{}
	for {
		scanner.Scan()
		scannedText := scanner.Text()
		if scannedText == "–∫–æ–Ω–µ—Ü" || scannedText == "–ö–æ–Ω–µ—Ü" {
			break
		}
		blogers = append(blogers, scannedText)
	}
	fmt.Println("–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –±–ª–æ–≥–µ—Ä—ã:")

	for index, bloger := range blogers {
		fmt.Println(index, bloger)
	}
	pause()

}

func pause() {

}
